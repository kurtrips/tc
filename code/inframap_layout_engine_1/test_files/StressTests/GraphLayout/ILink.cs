
using System.Collections.Generic;
namespace TopCoder.Graph.Layout
{
    /**
     * <p>
     * This interface declares the properties for a link. Links describe relationships between nodes. All the nodes stored
     * in a link must be connected into a group in any graph layout algorithm, please note there is no "starting node" or
     * "ending node" for links since the connection should be undirectional.
     * </p>
     * <p>
     * A link's path(which is generated by graph layout algorithm) is a list of segments, all these segments together will
     * connect the nodes stored in this link into a single group in geometry.
     * </p>
     * <p>
     * In this version Link class is provided as the sole implementation for this interface.
     * </p>
     * <p>
     * Thread safety: The implementations of this interface are not required to be thread safe.
     * </p>
     * 
     * 
     */
    public interface ILink
    {

        /**
         * <p>
         * This is the property for the segments of the link.
         * For the getter, null will never be returned, an empty list will be returned if the link itself is empty or the segments are
         * still not calculated. The elements contained in the list can't be null. There should not be any duplicate elements(equal
         * references) in the list.
         * For the setter, the value to be set must not be null, can be empty but can't contain null elements. It can't contain
         * duplicate elements(equal references), either.
         * </p>
         * 
         * 
         * @throws ArgumentException If the list to set contains null elements or duplicate elements.
         * @throws ArgumentNullException If the list to set is null.
         */
         IList<Segment> Segments
        {
            get;
            set;
        }

        /**
         * <p>
         * This is the property getter for the layer of the link. Elements(nodes, links and ports) are grouped into a stack of layers from
         * 1 to N.(The one at the bottom has layer 1)
         * The getter's return value is a positive integer.
         * </p>
         * 
         */
         int Layer
        {
            get;
        }

        /**
         * <p>
         * This is the property getter for the class of the link. 
         * The getter's return value may be any string including null and empty string.
         * </p>
         * 
         */
         string Class
        {
            get;
        }

        /**
         * <p>
         * This is the property getter for the id of the link. 
         * The getter's return value must be a non-negative long value.
         * </p>
         * 
         */
         long Id
        {
            get;
            set;
        }

        /**
         * <p>
         * This is the property getter for the name of the link. 
         * The getter's return value may be any string including null and empty string.
         * </p>
         * 
         */
         string Name
        {
            get;
        }

        /**
         * <p>
         * This is the property getter for the attributes of the link.
         * Null will never be returned, an empty list will be returned if the link has no attributes. The elements contained in the list
         * can't be null. There should not be any duplicate elements(equal references) in the list.
         * </p>
         * 
         */
         IList<IAttribute> Attributes
        {
            get;
            set;
        }

        /**
         * <p>
         * This is the property getter for the ports via which this link connects nodes.
         * Null will never be returned, an empty list will be returned if the link has no ports to go through. The elements
         * contained in the list can't be null. There should not be any duplicate elements(equal references) in the list.
         * </p>
         * 
         */
         IList<IPort> Ports
        {
            get;
        }

        /**
         * <p>
         * This is the property getter for the nodes which this link connects together.
         * Null will never be returned, an empty list will be returned if the link has no nodes to connect(it's an empty link, then).
         * The elements contained in the list can't be null. Although in most cases meaningless, there can be duplicate
         * elements in the return list in case for some special case grouping a node to itself has some sense.
         * </p>
         * 
         */
         IList<INode> Nodes
        {
            get;
        }

        /**
         * <p>
         * This is the property getter for the class id of the link. 
         * The getter's return value must be a non-negative long value.
         * </p>
         * 
         */
         long ClassId
        {
            get;
        }
    }


}