// ReflectionEngineParameters.cs
// Copyright (c) 2007, TopCoder, Inc. All rights reserved.
using System;

namespace TopCoder.CodeDoc.CSharp.Reflection
{
    /// <summary>
    /// <para>This class is a simple value object and contains all the parameters for the ReflectionEngine to write API
    /// documentation. This class is serializable so that it can be transferred by value between two different app
    /// domains.
    /// </para>
    /// </summary>
    /// <threadsafety>
    /// <para>Thread Safety: This class is mutable and not thread safe.</para>
    /// </threadsafety>
    /// <author>urtks</author>
    /// <author>TCSDEVELOPER</author>
    /// <version>1.0</version>
    /// <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
    [Serializable]
    public class ReflectionEngineParameters
    {
        /// <summary>
        /// <para>Represents the assembly names to analyze. Accessed by property AssemblyFileNames. Defaults to
        /// null.Can be null or empty meaning that this value is not specified. Can never contains null or empty
        /// elements.</para>
        /// </summary>
        private string[] assemblyFileNames;

        /// <summary>
        /// <para>
        /// Represents the /doc XML file names to analyze. /doc XML file is generated by complier and contains
        /// inline documentation. Accessed by property SlashDocFileNames. Defaults to null.
        /// Can be null or empty meaning that this value is not specified. Can never contains null or empty elements.
        /// </para>
        /// </summary>
        private string[] slashDocFileNames;

        /// <summary>
        /// <para>Represents the paths where to search for the desired assemblies. Accessed by property ReferencePaths.
        /// Defaults to null. Can be null or empty meaning that this value is not specified. Can never contains null or
        /// empty elements.</para>
        /// </summary>
        private string[] referencePaths;

        /// <summary>
        /// <para>Represents the module names to analyzed. Accessed by property ReferencePaths.Defaults to null. Can
        /// be null or empty meaning that this value is not specified. Can never contains null or empty elements.</para>
        /// </summary>
        private string[] moduleNames;

        /// <summary>
        /// <para>Represents the prefixes of the namespaces or types to analyzed. Accessed by property ReferencePaths.
        /// Defaults to null. Can be null or empty meaning that this value is not specified. Can never contains null or
        /// empty elements.</para>
        /// </summary>
        private string[] typePrefixes;

        /// <summary>
        /// <para>Represents whether to document private entities. Accessed by DocumentPrivates property. Defaults to
        /// false.</para>
        /// </summary>
        private bool documentPrivates;

        /// <summary>
        /// <para>Represents the configuration namespace used to create the Logger instance. Accessed by LoggerNamespace
        /// property. Defaults to null. Can be null meaning that this value is not specified. Can never be empty.</para>
        /// </summary>
        private string loggerNamespace;

        /// <summary>
        /// <para>Gets or sets the assembly names to analyze. Can be null or empty meaning that this value is not
        /// specified. Defaults to null. Can never contains null or empty elements.</para>
        /// </summary>
        /// <exception cref="ArgumentException">if the input value contains null or empty elements.</exception>
        /// <value>The Assembly file names to be analyzed</value>
        public string[] AssemblyFileNames
        {
            get
            {
                return assemblyFileNames;
            }
            set
            {
                Helper.ValidateArray(value, "AssemblyFileNames", false, false, true, true);
                assemblyFileNames = value;
            }
        }

        /// <summary>
        /// <para>Gets or sets the /doc XML file names to analyze. /doc XML file is generated by complier and contains
        /// inline documentation. Defaults to null. Can be null or empty meaning that this value is not specified. Can
        /// never contains null or empty elements.</para>
        /// </summary>
        /// <exception cref="ArgumentException">if the input value contains null or empty elements.</exception>
        /// <value>The compiler generated xml doc files to be analyzed</value>
        public string[] SlashDocFileNames
        {
            get
            {
                return slashDocFileNames;
            }
            set
            {
                Helper.ValidateArray(value, "SlashDocFileNames", false, false, true, true);
                slashDocFileNames = value;
            }
        }

        /// <summary>
        /// <para>Gets or sets the paths where to search for the desired assemblies. Defaults to null. Can be
        /// null or empty meaning that this value is not specified. Can never contains null or empty elements.</para>
        /// </summary>
        /// <exception cref="ArgumentException">if the input value contains null or empty elements.</exception>
        /// <value>The paths where to search for the dependent assemblies</value>
        public string[] ReferencePaths
        {
            get
            {
                return referencePaths;
            }
            set
            {
                Helper.ValidateArray(value, "ReferencePaths", false, false, true, true);
                referencePaths = value;
            }
        }

        /// <summary>
        /// <para>Gets or sets the module names to analyzed. Defaults to null. Can be null or empty meaning that
        /// all modules will be analyzed. Can never contains null or empty elements.</para>
        /// </summary>
        /// <exception cref="ArgumentException">if the input value contains null or empty elements.</exception>
        /// <value>The module names to be analyzed.</value>
        public string[] ModuleNames
        {
            get
            {
                return moduleNames;
            }
            set
            {
                Helper.ValidateArray(value, "ModuleNames", false, false, true, true);
                moduleNames = value;
            }
        }

        /// <summary>
        /// <para>Gets or sets the prefixes of the namespaces or types to analyzed. Defaults to null. Can be null or
        /// empty meaning all types and prefixes will be analyzed. Can never contains null or empty elements.</para>
        /// </summary>
        /// <exception cref="ArgumentException">if the input value contains null or empty elements.</exception>
        /// <value>The prefixes of the namespaces or types to analyzed</value>
        public string[] TypePrefixes
        {
            get
            {
                return typePrefixes;
            }
            set
            {
                Helper.ValidateArray(value, "TypePrefixes", false, false, true, true);
                typePrefixes = value;
            }
        }

        /// <summary>
        /// <para>Represents whether to document private entities. Defaults to false.</para>
        /// </summary>
        /// <value>whether to document private entities.</value>
        public bool DocumentPrivates
        {
            get
            {
                return documentPrivates;
            }
            set
            {
                documentPrivates = value;
            }
        }

        /// <summary>
        /// <para>Gets or sets the configuration namespace used to create the Logger instance. Defaults to null. Can be
        /// null meaning that this value is not specified. Can never be empty.</para>
        /// </summary>
        /// <exception cref="ArgumentException">if the input value is empty.</exception>
        public string LoggerNamespace
        {
            get
            {
                return loggerNamespace;
            }
            set
            {
                Helper.ValidateNotEmpty(value, "LoggerNamespace");
                loggerNamespace = value;
            }
        }

        /// <summary>
        /// <para>Creates a ReflectionEngineParameters instance</para>
        /// </summary>
        public ReflectionEngineParameters()
        {
        }
    }
}
