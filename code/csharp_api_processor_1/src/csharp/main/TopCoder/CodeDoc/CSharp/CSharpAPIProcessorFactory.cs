// CSharpAPIProcessorFactory.cs
// Copyright (c) 2007, TopCoder, Inc. All rights reserved.
using System;
using TopCoder.Util.CommandLine;
using TopCoder.Configuration;
using TopCoder.XML.CmdLineProcessor;
using TopCoder.CodeDoc.CSharp.Reflection;

namespace TopCoder.CodeDoc.CSharp
{
    /// <summary>
    /// <para>
    /// This class extends AbstractXMLProcessorFactory and represents the IXMLProcessorFactory implementation that
    /// creates CSharpAPIProcessor intances. Because of its base class AbstractXMLProcessorFactory, we can configure
    /// switch names and argument to option mappings.
    /// </para>
    /// 
    /// <para>The default switch keys are:</para>
    /// <list type="bullet">
    /// <item>
    /// <term>assemblies</term>
    /// <description>the set of assemblies to analyze. This switch is mandatory.</description>
    /// </item>
    /// <item>
    /// <term>docFiles</term>
    /// <description>The set of /doc XML files to analyze. /doc XML files are generated by compiler and
    /// contain inline documentation. Optional.</description>
    /// </item>
    /// <item>
    /// <term>modules</term>
    /// <description>
    /// The set of modules to analyze. Using this to screen only interested modules. Optional.
    /// </description>
    /// </item>
    /// <item>
    /// <term>typePrefixes</term>
    /// <description>
    /// The set of prefixes of types to analyze. Using this to screen only interested namespaces or types. Optional.
    /// </description>
    /// </item>
    /// <item>
    /// <term>documentPrivates</term>
    /// <description>Whether to list private types and members. Optional.</description>
    /// </item>
    /// </list>
    /// 
    /// <para>Besides the inputted switches, the following Configuration API properties are supported:</para>
    /// <list type="bullet">
    /// <item>
    /// <term>reference_paths</term>
    /// <description>
    /// property defines the set of paths where to search for the dependent assemblies. Optional.
    /// </description>
    /// </item>
    /// <item>
    /// <term>logger_namespace</term>
    /// <description>property defines the configuration namespace of the logger to be used by
    /// CSharpAPIProcessor. Optional.</description>
    /// </item>
    /// </list>
    /// 
    /// </summary>
    /// <threadsafety>
    /// <para>Thread Safety: This class extends a non thread-safe base and
    /// therefore is not thread-safe. Refer to the base class for more details.</para>
    /// </threadsafety>
    /// <author>urtks</author>
    /// <author>TCSDEVELOPER</author>
    /// <version>1.0</version>
    /// <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
    public class CSharpAPIProcessorFactory : AbstractXmlProcessorFactory
    {
        /// <summary>
        /// <para>Creates a new CSharpAPIProcessorFactory instance</para>
        /// </summary>
        public CSharpAPIProcessorFactory()
        {
        }

        /// <summary>
        /// <para>This method registers the command line switches used by this CSharpAPIProcessorFactory.</para>
        /// 
        /// <para>The default switch keys are:</para>
        /// <list type="bullet">
        /// <item>
        /// <term>assemblies</term>
        /// <description>the set of assemblies to analyze. This switch is mandatory.</description>
        /// </item>
        /// <item>
        /// <term>docFiles</term>
        /// <description>The set of /doc XML files to analyze. /doc XML files are generated by compiler and
        /// contain inline documentation. Optional.</description>
        /// </item>
        /// <item>
        /// <term>modules</term>
        /// <description>
        /// The set of modules to analyze. Using this to screen only interested modules. Optional.
        /// </description>
        /// </item>
        /// <item>
        /// <term>typePrefixes</term>
        /// <description>
        /// The set of prefixes of types to analyze. Using this to screen only interested namespaces or types. Optional.
        /// </description>
        /// </item>
        /// <item>
        /// <term>documentPrivates</term>
        /// <description>Whether to list private types and members. Optional.</description>
        /// </item>
        /// </list>
        /// 
        /// </summary>
        /// <param name="commandLineParser">the command line parser to use</param>
        /// <param name="configuration">the configuration node to use</param>
        /// <exception cref="ArgumentNullException">if any argument is null</exception>
        /// <exception cref="XmlProcessorFactoryException">
        /// If anything else goes wrong. Thrown by base class.
        /// </exception>
        public override void ConfigureCommandLineParser(CommandLineParser commandLineParser,
            IConfiguration configuration)
        {
            Helper.ValidateNotNull(commandLineParser, "commandLineParser");
            Helper.ValidateNotNull(configuration, "configuration");

            //Create 'assemblies' switch and set it to mandatory.
            CommandLineSwitch assembliesSwitch = new CommandLineSwitch(
                "assemblies", "[BasePath]/MyAssembly.dll", "The set of assemblies to analyze.");
            assembliesSwitch.Factor = (int)FactorParams.ONE_OR_MORE;

            //Create the switches to support
            CommandLineSwitch[] switches = new CommandLineSwitch[] {
                assembliesSwitch,
                new CommandLineSwitch("docFiles", "BasePath/MyAssembly1.xml;BasePath/MyAssembly2.xml",
                    "The set of /doc XML files to analyze."),
                new CommandLineSwitch("modules", "MyModule1;MyModule2",
                    "The set of prefixes of types to analyze."),
                new CommandLineSwitch("documentPrivates",
                    "This switch if specified means that private members will be documented.",
                    "Whether to list private types and members."),
                new CommandLineSwitch("typePrefixes", "MyType1;MyType2",
                    "Use this to screen only interested namespaces or types.")
            };

            base.ConfigureCommandLineParser(switches, commandLineParser, configuration);
        }

        /// <summary>
        /// <para>This method creates a new instance of CSharpAPIProcessor from the the given set of inputted switches
        /// and the configuration node.</para>
        /// <para>The default switch keys are:</para>
        /// <list type="bullet">
        /// <item>
        /// <term>assemblies</term>
        /// <description>the set of assemblies to analyze. This switch is mandatory.</description>
        /// </item>
        /// <item>
        /// <term>docFiles</term>
        /// <description>The set of /doc XML files to analyze. /doc XML files are generated by compiler and
        /// contain inline documentation. Optional.</description>
        /// </item>
        /// <item>
        /// <term>modules</term>
        /// <description>
        /// The set of modules to analyze. Using this to screen only interested modules. Optional.
        /// </description>
        /// </item>
        /// <item>
        /// <term>typePrefixes</term>
        /// <description>
        /// The set of prefixes of types to analyze. Using this to screen only interested namespaces or types. Optional.
        /// </description>
        /// </item>
        /// <item>
        /// <term>documentPrivates</term>
        /// <description>Whether to list private types and members. Optional.</description>
        /// </item>
        /// </list>
        /// 
        /// <para>Besides the inputted switches, the following Configuration API properties are supported:</para>
        /// <list type="bullet">
        /// <item>
        /// <term>reference_paths</term>
        /// <description>
        /// property defines the set of paths where to search for the dependent assemblies. Optional.
        /// </description>
        /// </item>
        /// <item>
        /// <term>logger_namespace</term>
        /// <description>property defines the configuration namespace of the logger to be used by
        /// CSharpAPIProcessor. Optional.</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="configuration">the configuration node to use</param>
        /// <param name="inputtedSwitches">the switches entered</param>
        /// <exception cref="ArgumentNullException">if any argument is null</exception>
        /// <exception cref="ArgumentException">if inputtedSwitches contains a null element</exception>
        /// <exception cref="XmlProcessorFactoryException">if anything else goes wrong</exception>
        public override IXmlProcessor NewXmlProcessor(CommandLineSwitch[] inputtedSwitches,
            IConfiguration configuration)
        {
            Helper.ValidateNotNull(configuration, "configuration");
            Helper.ValidateArray(inputtedSwitches, "inputtedSwitches", true, false, true, false);

            try
            {
                ReflectionEngineParameters rep = new ReflectionEngineParameters();
                //Set the ReflectionEngineParameters properties.
                foreach (CommandLineSwitch inputtedSwitch in inputtedSwitches)
                {
                    string[] result = inputtedSwitch.Result as string[];

                    if (inputtedSwitch.Switch == "assemblies")
                    {
                        rep.AssemblyFileNames = result;
                    }
                    else if (inputtedSwitch.Switch == "docFiles")
                    {
                        rep.SlashDocFileNames = result;
                    }
                    else if (inputtedSwitch.Switch == "modules")
                    {
                        rep.ModuleNames = result;
                    }
                    else if (inputtedSwitch.Switch == "typePrefixes")
                    {
                        rep.TypePrefixes = result;
                    }
                    else if (inputtedSwitch.Switch == "documentPrivates")
                    {
                        rep.DocumentPrivates = true;
                    }
                }

                //Add the reference paths from configuration
                string[] refPaths = configuration.GetAttribute("reference_paths") as string[];
                if (refPaths != null)
                {
                    rep.ReferencePaths = refPaths;
                }

                //Add the logger namespace from configuration
                string loggerNs = configuration.GetSimpleAttribute("logger_namespace") as string;
                if (loggerNs != null)
                {
                    rep.LoggerNamespace = loggerNs;
                }

                return new CSharpAPIProcessor(rep);
            }
            catch (Exception e)
            {
                throw new XmlProcessorFactoryException("Unable to create new xml processor.", e);
            }
        }
    }
}
