// SlashDocCache.cs
// Copyright (c) 2007, TopCoder, Inc. All rights reserved.
using System;
using System.Collections;
using System.Xml;
using TopCoder.LoggingWrapper;

namespace TopCoder.CodeDoc.CSharp.Reflection
{
    /// <summary>
    /// This internal class represents a cache of the /doc XML files. /doc XML files are generated from compiler and
    /// contain inline API documentation. As we know, the structure of the /doc XML file generated by compiler is
    /// flattened. The documented entities (types, members etc.) are listed one by one, each of which has a unque id.
    /// This class keeps an IDictionary structure that associates each unque id with its documentation from the /doc XML
    /// files. Therefore it is used by the ReflectionEngine. At the begining of processing the API, a set of /doc XML
    /// files are added to the SlashDocCache instance by the method AddSlashDocFiles. And during the process, the
    /// ReflectionEngine uses the indexer of this SlashDocCache to get the documentation associated with the given type
    /// or member by its unique id.
    /// </summary>
    /// <threadsafety>
    /// <para>Thread Safety: This class is mutable and not thread safe.</para>
    /// </threadsafety>
    /// <author>urtks</author>
    /// <author>TCSDEVELOPER</author>
    /// <version>1.0</version>
    /// <copyright>Copyright (c) 2007, TopCoder, Inc. All rights reserved.</copyright>
    public class SlashDocCache
    {
        /// <summary>
        /// <para>Represents the MBRLogger instance used to log infos, warnings or errors.
        /// Initialized in the constructor. Reference not changed afterwards.
        /// Can be null indicating no logger is used.</para>
        /// </summary>
        private readonly MBRLogger logger;

        /// <summary>
        /// <para>Represents the IDictionary instance that keeps the each item's documentation which is indexed by the
        /// unque id of the item. Initialized to new Hashtable(). Reference not changed afterwards. The key of the
        /// dictionary is a string and can not be null or empty. The value of the dictionary is a string and can be not
        /// be null.</para>
        /// </summary>
        private readonly IDictionary docs = new Hashtable();

        /// <summary>
        /// <para>Gets the unique ids of all the items in this cache.
        /// The return value will not be null nor contain null or empty elements.
        /// But the length may be zero.</para>
        /// </summary>
        /// <value>The ids of 'member' nodes present in the /doc file(s).</value>
        public string[] UniqueIDs
        {
            get
            {
                //Return the keys of the docs hashtable
                string[] ids = new string[docs.Count];
                docs.Keys.CopyTo(ids, 0);
                return ids;
            }
        }

        /// <summary>
        /// <para>Creates a new instance of SlashDocCache with no logger.</para>
        /// </summary>
        public SlashDocCache()
        {
        }

        /// <summary>
        /// <para>Creates a new instance of SlashDocCache with the given MBRLogger instance.</para>
        /// </summary>
        /// <param name="logger">the MBRLogger instance used to log infos, warnings or errors.</param>
        /// <exception cref="ArgumentNullException">if logger is null.</exception>
        public SlashDocCache(MBRLogger logger)
        {
            Helper.ValidateNotNull(logger, "logger");
            this.logger = logger;
        }

        /// <summary>
        /// <para>Adds the content of the /doc XML file to this cache.
        /// Any warning or error (except ArgumentNullException and ArgumentException when fileName is null or empty)
        /// is logged using the referenced MBRLogger instance.</para>
        /// </summary>
        /// <param name="fileName">the filename of the /doc XML file.</param>
        /// <exception cref="ArgumentNullException">if fileName is null.</exception>
        /// <exception cref="ArgumentException">if fileName is empty.</exception>
        public void AddSlashDocFile(string fileName)
        {
            Helper.ValidateNotNullNotEmpty(fileName, "fileName");

            try
            {
                //Load the compiler output files
                XmlTextReader reader = new XmlTextReader(fileName);
                object member = reader.NameTable.Add("member");

                while (reader.Read())
                {
                    // Add all ids of nodes with name 'member' the docs HashTable
                    if ((reader.NodeType == XmlNodeType.Element) && (reader.Name.Equals(member)))
                    {
                        //Get the name of the 'member' node.
                        string id = reader.GetAttribute("name");
                        if (id == null)
                        {
                            continue;
                        }

                        //Get the documentation
                        string doc = reader.ReadInnerXml().Trim();

                        //Log if duplicate ids are found
                        if (docs.Contains(id))
                        {
                            if (logger != null)
                            {
                                logger.Log(Level.WARN, "Duplicate <member> tags found with the same id = {0}.", id);
                            }
                        }

                        docs[id] = doc;
                    }
                }
            }
            //Ignore exceptions. Just log them.
            catch (Exception e)
            {
                if (logger != null)
                {
                    logger.Log(Level.ERROR, "Unable to load /doc XML file {0}. Exception: {1}.",
                        new object[] { fileName, e.ToString() });
                }
            }
        }

        /// <summary>
        /// <para>Adds the content of a set of the /doc XML files to this cache. Any warning or error (except
        /// ArgumentNullException and ArgumentException when fileNames is invalid) is logged using the referenced
        /// MBRLogger instance.</para>
        /// </summary>
        /// <param name="fileNames">the set of the /doc XML file names.</param>
        /// <exception cref="ArgumentNullException">if fileNames is null.</exception>
        /// <exception cref="ArgumentException">if fileNames contains null or empty.</exception>
        public void AddSlashDocFiles(string[] fileNames)
        {
            Helper.ValidateArray(fileNames, "fileNames", true, false, true, true);

            //Delagate each file to AddSlashDocFile
            foreach (string fileName in fileNames)
            {
                AddSlashDocFile(fileName);
            }
        }

        /// <summary>
        /// <para>Gets the documentation of the item with the given unique id.
        /// It can be null when no documentation of the specified item exists in this cache.</para>
        /// </summary>
        /// <param name="uniqueID">the unique id of the item (type or member)</param>
        /// <exception cref="ArgumentNullException">if uniqueID is null.</exception>
        /// <exception cref="ArgumentException">If uniqueID is empty.</exception>
        public string this[string uniqueID]
        {
            get
            {
                Helper.ValidateNotNullNotEmpty(uniqueID, "uniqueID");

                //return the documentation for the given id
                return (string) docs[uniqueID];
            }
        }

    }
}
