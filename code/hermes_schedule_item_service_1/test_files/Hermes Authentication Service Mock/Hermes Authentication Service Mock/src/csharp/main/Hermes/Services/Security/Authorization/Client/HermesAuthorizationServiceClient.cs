/*
 * Copyright (c) 2007, TopCoder, Inc. All rights reserved.
 */
using System;
using System.Configuration;
using System.ServiceModel;
using System.ServiceModel.Channels;
using TopCoder.Util.ConfigurationManager;
using TopCoder.Util.ExceptionManager.SDE;
using TopCoder.Util.ObjectFactory;
using System.Collections.Generic;
namespace Hermes.Services.Security.Authorization.Client
{

    /// <summary>
    /// <para>
    /// This is a custom client that can be used to configure a service
    /// endpoint through <see cref="ConfigManager"/>.
    /// </para>
    /// </summary>
    /// <remarks>
    /// <p>
    /// It can be used if the user has a reason to prefer the
    /// <see cref="ConfigManager"/> based client to one generated by
    /// svcutils.exe.
    /// It is similar to a client generated by svcutils.exe, except that it
    /// doesn't have any public constructors but provides two GetClient methods
    /// that return new <see cref="HermesAuthorizationServiceClient"/> objects
    /// with properties read from configuration. Static methods are used rather
    /// than constructors so that the configuration properties can be read
    /// before passing the required objects on to the base class constructor.
    /// All of the service methods simply pass the arguments along to the
    /// corresponding method on the underlying Channel.
    /// </p>
    /// </remarks>
    ///
    /// <remarks>
    /// <p>
    /// <strong>Thread Safety:</strong>
    /// Since the base class <see cref="ClientBase{TParent}"/> is not thread
    /// safe, this class is not thread safe.
    /// </p>
    /// </remarks>
    /// <author>TCSDESIGNER</author>
    /// <author>TCSDEVELOPER</author>
    /// <version>1.0</version>
    /// <copyright>
    /// Copyright (c)2007, TopCoder, Inc. All rights reserved.
    /// </copyright>
    public class HermesAuthorizationServiceClient : ClientBase<IAuthorization>,
        IAuthorization
    {
        /// <summary>
        /// <para>
        /// Represents the object factory namespace.(optional)
        /// </para>
        /// </summary>
        private const string ObjectFactoryNamespace
            = "ObjectFactoryNamespace";

        /// <summary>
        /// <para>
        /// Represents the binding key in object factory configuration.
        /// (required)
        /// </para>
        /// </summary>
        private const string Binding = "Binding";

        /// <summary>
        /// <para>
        /// Represents the endpoint address key in object factory
        /// configuration.(required)
        /// </para>
        /// </summary>
        private const string EndpointAddress = "EndpointAddress";

        /// <summary>
        /// <para>
        /// Creates a new <see cref="HermesAuthorizationServiceClient"/>
        /// with the given <see cref="Binding"/> and
        /// <see cref="EndpointAddress"/>.
        /// </para>
        /// </summary>
        /// <param name="binding">
        /// The binding with which to make calls to the service
        /// </param>
        /// <param name="remoteAddress">
        /// The address of the service endpoint
        /// </param>
        /// <exception cref="ArgumentNullException">
        /// if either argument is null
        /// </exception>
        private HermesAuthorizationServiceClient(Binding binding,
            EndpointAddress remoteAddress) : base(binding, remoteAddress)
        {
        }

        /// <summary>
        /// <para>
        /// Create a <see cref="HermesAuthorizationServiceClient"/> configured
        /// from the default namespace.
        /// </para>
        /// </summary>
        /// <return>
        /// fully configured <see cref="HermesAuthorizationServiceClient"/>
        /// </return>
        /// <exception cref="SelfDocumentingException">
        /// Inner Exception:
        /// <see cref="ConfigurationException"/>(if a required
        /// configuration parameter is missing or if there's a problem getting
        /// the namespace or constructing the configured objects with
        /// <see cref="ObjectFactory"/>).
        /// </exception>
        public static HermesAuthorizationServiceClient GetClient()
        {
            return
                GetClient(typeof(HermesAuthorizationServiceClient).FullName);
        }

        /// <summary>
        /// <para>
        /// Creates a <see cref="HermesAuthorizationServiceClient"/> from the
        /// specified namespace.
        /// </para>
        /// </summary>
        /// <param name="namespace">
        /// <see cref="ConfigManager"/> namespace from which to read
        /// configuration.
        /// </param>
        /// <return>
        /// a fully configured <see cref="HermesAuthorizationServiceClient"/>
        /// </return>
        ///
        /// <exception cref="SelfDocumentingException">
        /// Inner Exception:
        /// <see cref="ArgumentNullException"/> (if the argument is null),
        /// <see cref="ArgumentException"/> (if the argument is empty after
        /// trim), <see cref="ConfigurationException"/>(if a required
        /// configuration parameter is missing or if there's a problem getting
        /// the namespace or constructing the configured objects with
        /// <see cref="ObjectFactory"/>).
        /// </exception>
        public static HermesAuthorizationServiceClient GetClient(
            string @namespace)
        {
            try
            {
                Helper.CheckString(@namespace, "namespace");
                try
                {
                    ObjectFactory of = CreateObjectFactory(@namespace);
                    return new HermesAuthorizationServiceClient(
                        CreateBinding(of, @namespace),
                        CreateEndpointAddress(of, @namespace));
                }
                catch (ConfigurationException)
                {
                    throw;
                }
                catch (Exception e)
                {
                    throw new ConfigurationException(string.Format(
                        "Errors occurred when initializing {0} instance",
                        "HermesAuthorizationServiceClient"), e);
                }
            }
            catch (Exception e)
            {
                throw WrapSDE(e, @namespace, "Errors occurred in GetClient.");
            }
        }

        /// <summary>
        /// <para>
        /// Wraps the given exception into a SDE.
        /// </para>
        /// </summary>
        ///
        /// <remarks>
        /// <para>
        /// This method only be invoked in <see cref="GetClient(string)"/>.
        /// </para>
        /// </remarks>
        /// <param name="e">
        /// <see cref="Exception"/> instance.
        /// </param>
        /// <param name="namespace">
        /// namespace string.
        /// </param>
        /// <param name="message">
        /// Error message.
        /// </param>
        /// <returns>
        /// <see cref="SelfDocumentingException"/> instance.
        /// </returns>
        private static Exception WrapSDE(Exception e, string @namespace,
            string message)
        {
            SelfDocumentingException sde = e as SelfDocumentingException;
            if (sde == null)
            {
                sde = new SelfDocumentingException(message, e);
            }
            MethodState methodState = sde.PinMethod(String.Format("{0}.{1}",
                typeof(HermesAuthorizationServiceClient).FullName,
                "GetClient"), e.StackTrace);
            methodState.AddMethodParameter("namespace", @namespace);
            methodState.Lock();
            return sde;
        }

        /// <summary>
        /// <para>
        /// Create <see cref="ObjectFactory"/> instance using
        /// <paramref name="ns"/>.
        /// </para>
        /// </summary>
        /// <param name="ns">
        /// namespace string.
        /// </param>
        /// <returns>
        /// <see cref="ObjectFactory"/> instance created.
        /// </returns>
        /// <exception cref="ConfigurationException">
        /// If some property is missing in the config file.
        /// </exception>
        /// <exception cref="ObjectSourceException">
        /// Wraps a configuration specific exception(Configuration Manager exception) or
        /// could signal a missing property or parsing error.
        /// </exception>
        /// <exception cref="ObjectCreationException">
        /// Wraps an object creation exception (reflection exception) or signals an object creation problem.
        /// </exception>
        private static ObjectFactory CreateObjectFactory(string ns)
        {
            string objectFactoryNS = Helper.LoadPropertyString(
                ns, ObjectFactoryNamespace, false);
            return objectFactoryNS == null ?
                ObjectFactory.GetDefaultObjectFactory() :
                ObjectFactory.GetDefaultObjectFactory(objectFactoryNS);
        }

        /// <summary>
        /// <para>
        /// Create <see cref="Binding"/> instance using the
        /// <see cref="ObjectFactory"/> from configuration.
        /// </para>
        /// </summary>
        /// <param name="of">
        /// <see cref="ObjectFactory"/> instance.
        /// </param>
        /// <param name="ns">
        /// namespace string.
        /// </param>
        /// <returns>
        /// <see cref="Binding"/> instance created.
        /// </returns>
        /// <exception cref="ConfigurationException">
        /// If some property is missing in the config file.
        /// </exception>
        /// <exception cref="ObjectSourceException">
        /// Wraps an implementation specific exception (SQL exception for a database implementation,
        /// Configuration Manager exception for a configuration file implementation, etc) or could
        /// signal an implementation specific problem (missing property, parse error, etc)
        /// </exception>
        /// <exception cref="ObjectCreationException">
        /// Wraps an object creation exception (reflection exception) or signals an object creation problem.
        /// </exception>
        private static Binding CreateBinding(ObjectFactory of, string ns)
        {
            string bindingKey = Helper.LoadPropertyString(ns, Binding, true);
            return of.CreateDefinedObject(bindingKey) as Binding;
        }

        /// <summary>
        /// <para>
        /// Create <see cref="EndpointAddress"/> instance using the
        /// <see cref="ObjectFactory"/> from configuration.
        /// </para>
        /// </summary>
        /// <param name="of">
        /// <see cref="ObjectFactory"/> instance.
        /// </param>
        /// <param name="ns">
        /// namespace string.
        /// </param>
        /// <returns>
        /// <see cref="EndpointAddress"/> instance created.
        /// </returns>
        /// <exception cref="ConfigurationException">
        /// If some property is missing in the config file.
        /// </exception>
        /// <exception cref="ObjectSourceException">
        /// Wraps an implementation specific exception (SQL exception for a database implementation,
        /// Configuration Manager exception for a configuration file implementation, etc) or could
        /// signal an implementation specific problem (missing property, parse error, etc)
        /// </exception>
        /// <exception cref="ObjectCreationException">
        /// Wraps an object creation exception (reflection exception) or signals an object creation problem.
        /// </exception>
        private static EndpointAddress CreateEndpointAddress(ObjectFactory of,
            string ns)
        {
            string endpointAddressKey = Helper.LoadPropertyString(ns,
                EndpointAddress, true);
            return of.CreateDefinedObject(endpointAddressKey)
                as EndpointAddress;
        }

        /// <summary>
        /// <para>
        /// Check if the user for the current session has a specified set of
        /// rights to a given entity.
        /// </para>
        /// </summary>
        ///
        /// <param name="sessionId">id of the current session</param>
        /// <param name="sessionToken">token for the current session</param>
        /// <param name="entityName">the name of the entity to check</param>
        /// <param name="rights">
        /// an enumeration of all the rights to check
        /// </param>
        /// <return>
        /// true if the current user has all of the specified rights for the
        /// given entity
        /// </return>
        ///
        /// <exception cref="FaultException">
        /// The inner exception contains:
        /// <see cref="ArgumentNullException"/> (if any argument is null),
        /// <see cref="ArgumentException"/> (if <paramref name="sessionId"/>
        /// or <paramref name="entityName"/> is empty),
        /// <see cref="InvalidSessionException"/>(if the specified session is
        /// not valid), <see cref="AuthorizationServiceException"/>(if there's
        /// a problem interacting with the wrapped authentication service),
        /// <see cref="ObjectDisposedException"/>(if the object has been
        /// disposed).
        /// </exception>
        public bool CheckEntity(string sessionId, string sessionToken,
            string entityName, Rights rights)
        {
            return base.Channel.CheckEntity(sessionId, sessionToken,
                entityName, rights);
        }

        /// <summary>
        /// <para>
        /// Check if the user for the specified session can execute the
        /// specified function.
        /// </para>
        /// </summary>
        ///
        /// <param name="sessionId">id of the current session</param>
        /// <param name="sessionToken">
        /// token for the current session
        /// </param>
        /// <param name="functionName">
        /// the name of the function to check
        /// </param>
        /// <return>
        /// true if the current user has rights to perform the
        /// specified function.
        /// </return>
        ///
        /// <exception cref="FaultException">
        /// The inner exception contains:
        /// <see cref="ArgumentNullException"/> (if any argument is null),
        /// <see cref="ArgumentException"/> (if <paramref name="sessionId"/>
        /// or <paramref name="entityName"/> is empty),
        /// <see cref="InvalidSessionException"/>(if the specified session is
        /// not valid), <see cref="AuthorizationServiceException"/>(if there's
        /// a problem interacting with the wrapped authentication service),
        /// <see cref="ObjectDisposedException"/>(if the object has been
        /// disposed).
        /// </exception>
        public bool CheckFunction(string sessionId, string sessionToken,
            string functionName)
        {
            return base.Channel.CheckFunction(sessionId, sessionToken,
                functionName);
        }

        /// <summary>
        /// <para>
        /// Check if the user for the specified session belongs to the
        /// specified role.
        /// </para>
        /// </summary>
        /// <param name="sessionId">id of the current session</param>
        /// <param name="sessionToken">token for the current session</param>
        /// <param name="roleName">the name of the role to check</param>
        /// <return>
        /// true if the user belongs to the role; false otherwise
        /// </return>
        ///
        /// <exception cref="FaultException">
        /// The inner exception contains:
        /// <see cref="ArgumentNullException"/> (if any argument is null),
        /// <see cref="ArgumentException"/> (if <paramref name="sessionId"/>
        /// or <paramref name="entityName"/> is empty),
        /// <see cref="InvalidSessionException"/>(if the specified session is
        /// not valid), <see cref="AuthorizationServiceException"/>(if there's
        /// a problem interacting with the wrapped authentication service),
        /// <see cref="ObjectDisposedException"/>(if the object has been
        /// disposed).
        /// </exception>
        public bool CheckRole(string sessionId, string sessionToken,
            string roleName)
        {
            return base.Channel.CheckRole(sessionId, sessionToken, roleName);
        }

        /// <summary>
        /// <para>
        /// Retrieve all of the rights a user has for a given entity.
        /// </para>
        /// </summary>
        /// <param name="sessionId">id of the current session</param>
        /// <param name="sessionToken">token for the current session</param>
        /// <param name="entityName">the name of the entity to check</param>
        /// <return>
        /// all of the rights the user has for the given entity
        /// </return>
        ///
        /// <exception cref="FaultException">
        /// The inner exception contains:
        /// <see cref="ArgumentNullException"/> (if any argument is null),
        /// <see cref="ArgumentException"/> (if <paramref name="sessionId"/>
        /// or <paramref name="entityName"/> is empty),
        /// <see cref="InvalidSessionException"/>(if the specified session is
        /// not valid), <see cref="AuthorizationServiceException"/>(if there's
        /// a problem interacting with the wrapped authentication service),
        /// <see cref="ObjectDisposedException"/>(if the object has been
        /// disposed).
        /// </exception>
        public Rights GetEntityRights(string sessionId, string sessionToken,
            string entityName)
        {
            return base.Channel.GetEntityRights(sessionId, sessionToken,
                entityName);
        }

        /// <summary>
        /// <para>
        /// Get the attributes from the specified function.
        /// </para>
        /// </summary>
        /// <param name="sessionId">id of the current session</param>
        /// <param name="sessionToken">token for the current session</param>
        /// <param name="functionName">
        /// the name of the function.
        /// </param>
        /// <returns>
        /// The name-value pairs of the Attributes property for a specific
        /// wrapped FunctionalAttribute instance.
        /// </returns>
        ///
        /// <exception cref="FaultException">
        /// The inner exception contains:
        /// <see cref="ArgumentNullException"/> (if any argument is null),
        /// <see cref="ArgumentException"/> (if <paramref name="sessionId"/> or
        /// <paramref name="functionName"/> is empty),
        /// <see cref="InvalidSessionException"/>(if the specified session is
        /// not valid), <see cref="AuthorizationServiceException"/>(if there's
        /// a problem interacting with the wrapped authentication service),
        /// <see cref="ObjectDisposedException"/>(if the object has been
        /// disposed).
        /// </exception>
        public List<KeyValuePair<string, string>> GetFunctionAttributes(
            string sessionId, string sessionToken, string functionName)
        {
            return base.Channel.GetFunctionAttributes(sessionId, sessionToken,
                functionName);
        }

        /// <summary>
        /// <para>
        /// Set the applicaton id.
        /// </para>
        /// </summary>
        /// <param name="appId">
        /// The applicaton id to be set.
        /// </param>
        /// <exception cref="FaultException">
        /// The inner exception contains:
        /// <see cref="ArgumentNullException"/> (if any argument is null),
        /// <see cref="ArgumentException"/> (if <paramref name="appId"/>
        /// is empty),
        /// <see cref="ObjectDisposedException"/>(if the object has been
        /// disposed).
        /// </exception>
        public void SetApplication(string appId)
        {
            base.Channel.SetApplication(appId);
        }
    }
}
